pipeline {
    agent {
        label 'sha-ubuntu-node'
    }
    triggers {
        pollSCM('H/3 * * * *') // checks every 3 mins, or
        // OR use GitHub webhook instead (recommended)
    }

    environment {
        DOCKERHUB_USER = 'shacloudlab'
        IMAGE_NAME = 'jenkins-docker-lab'
        SONARQUBE = 'SonarCloud'
        SONAR_TOKEN = credentials('sha-sonar-token')

    }
   
     stages {
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
         stage('GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    # Install gitleaks if not present
                    if ! command -v gitleaks &> /dev/null; then
                        echo "Installing Gitleaks..."
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi
                    # Run gitleaks detect even if from non commited codes


                    echo "üîç Running Gitleaks scan..."
                    set +e  # temporarily disable fail-fast
                    gitleaks detect --source python_app --no-git --verbose --report-path gitleaks-report.json 
                    result=$?  # capture exit status
                    set -e  # re-enable fail-fast

                if [ "$result" -ne 0 ]; then
                    echo "‚ùå Gitleaks found leaks (exit code $result)"
                    exit 1
                else
                    echo "‚úÖ No leaks found."
                fi
                '''
            }
        }

        stage('Python Setup & Test with Coverage') {
            steps {
                dir('python_app') {
                    sh '''#!/bin/bash
                        set -euxo pipefail
                        rm -rf venv
                        python3 -m venv venv
                        ./venv/bin/pip install --upgrade pip
                        ./venv/bin/pip install -r requirements.txt
                        ./venv/bin/python -m pytest tests/ --maxfail=1 --disable-warnings -q \
                            --cov=. --cov-report=xml:../coverage.xml
                    '''               
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'sha-sonar-token', installationName: 'sha-sq') {
                    sh '''#!/bin/bash
                        set -eux
                        echo "=== SonarQube installation ==="
                        export SONAR_SCANNER_VERSION=7.2.0.5079
                        export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
                        curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
                        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
                        export PATH=$SONAR_SCANNER_HOME/bin:$PATH

                        echo "=== Running SonarQube Scanner ==="
                        sonar-scanner \
                        -Dsonar.organization="shaputta" \
                        -Dsonar.projectKey="shaputta_devsecops-project" \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.sources=. \
                        -Dsonar.python.coverage.reportPaths=coverage.xml \
                        -Dsonar.c.file.suffixes=- \
                        -Dsonar.cpp.file.suffixes=- \
                        -Dsonar.objc.file.suffixes=- \
                        -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.exclusions=**/venv/**,**/__pycache__/**,**/tests/** \
                        '''
                }
            }
        }
         stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate abortPipeline: true
                        echo "Quality Gate status: ${qg.status}"
                    }
                }
            }
        }
        stage('Clean up image and container') {
            steps {
                script {
                    sh 'docker rm  jenkins_app -f || true'
                    sh 'docker image rmi $DOCKERHUB_USER/$IMAGE_NAME:latest || true'
                    sh 'docker rm python-new-app -f || true'
                }
            }  
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest python_app'
                    sh 'docker run -d -p 8005:5000 --name python-new-app $DOCKERHUB_USER/$IMAGE_NAME:latest'
                }
            }
        }
        stage('Scan Docker Image with Trivy') {
            steps {
                // Scan and save report
                sh '''
                  mkdir -p trivy-reports
                  trivy image --no-progress --exit-code 0 --format table -o trivy-reports/report.txt $DOCKERHUB_USER/$IMAGE_NAME
                  cat trivy-reports/report.txt
                '''
            }
        }
        stage('Archive Trivy Report') {
            steps {
                archiveArtifacts artifacts: 'trivy-reports/report.txt', fingerprint: true
            }
        }
        stage('OWASP ZAP Scan') {
    steps {
        sh '''#!/bin/bash
        # Use Bash explicitly so "pipefail" works
        set -euxo pipefail
 
        TARGET_URL="http://44.223.83.148:8005"
        echo "üîÑ Waiting for app to start..."
        for i in {1..10}; do
            if curl -s --max-time 5 $TARGET_URL >/dev/null; then
                echo "‚úÖ App is up!"
                break
            fi
            sleep 5
        done
 
        echo "üöÄ Running OWASP ZAP Baseline Scan..."
        # Run ZAP in Docker; ignore exit code (ZAP returns 2 for warnings)
        docker run --rm -v $(pwd):/zap/wrk/:rw \
            --network="host" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t $TARGET_URL -r zap_report.html || true
 
        mkdir -p reports
        mv zap_report.html reports/
 
        echo "üîç Checking ZAP results for FAIL-NEW entries..."
        FAIL_COUNT=$(grep -oE "FAIL-NEW: [0-9]+" reports/zap_report.html | awk '{print $2}' || echo 0)
 
        # If grep finds nothing, default to 0
        if [ -z "$FAIL_COUNT" ]; then
            FAIL_COUNT=0
        fi
 
        if [ "$FAIL_COUNT" -gt 0 ]; then
            echo "‚ùå ZAP found $FAIL_COUNT high-severity vulnerabilities!"
            exit 1
        else
            echo "‚úÖ No high-severity vulnerabilities found. Build will continue."
        fi
        '''
    }
    post {
        always {
            archiveArtifacts artifacts: 'reports/zap_report.html', fingerprint: true
        }
        success {
            echo '‚úÖ ZAP scan completed successfully ‚Äî only warnings or no issues.'
        }
        failure {
            echo '‚ùå Build failed because high-severity issues were found in ZAP scan.'
        }
    }
}
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}